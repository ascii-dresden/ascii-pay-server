// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/authentication.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateBarcodeRequest {
    // message fields
    pub code: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateBarcodeRequest {
    fn default() -> &'a AuthenticateBarcodeRequest {
        <AuthenticateBarcodeRequest as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateBarcodeRequest {
    pub fn new() -> AuthenticateBarcodeRequest {
        ::std::default::Default::default()
    }

    // string code = 1;


    pub fn get_code(&self) -> &str {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateBarcodeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.code.is_empty() {
            os.write_string(1, &self.code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateBarcodeRequest {
        AuthenticateBarcodeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code",
                |m: &AuthenticateBarcodeRequest| { &m.code },
                |m: &mut AuthenticateBarcodeRequest| { &mut m.code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateBarcodeRequest>(
                "AuthenticateBarcodeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateBarcodeRequest {
        static instance: ::protobuf::rt::LazyV2<AuthenticateBarcodeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateBarcodeRequest::new)
    }
}

impl ::protobuf::Clear for AuthenticateBarcodeRequest {
    fn clear(&mut self) {
        self.code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateBarcodeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateBarcodeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateBarcodeResponse {
    // message fields
    pub tokenType: TokenType,
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateBarcodeResponse {
    fn default() -> &'a AuthenticateBarcodeResponse {
        <AuthenticateBarcodeResponse as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateBarcodeResponse {
    pub fn new() -> AuthenticateBarcodeResponse {
        ::std::default::Default::default()
    }

    // .authentication.TokenType tokenType = 1;


    pub fn get_tokenType(&self) -> TokenType {
        self.tokenType
    }
    pub fn clear_tokenType(&mut self) {
        self.tokenType = TokenType::ACCOUNT_ACCESS_TOKEN;
    }

    // Param is passed by value, moved
    pub fn set_tokenType(&mut self, v: TokenType) {
        self.tokenType = v;
    }

    // string token = 2;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateBarcodeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tokenType, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tokenType != TokenType::ACCOUNT_ACCESS_TOKEN {
            my_size += ::protobuf::rt::enum_size(1, self.tokenType);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tokenType != TokenType::ACCOUNT_ACCESS_TOKEN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.tokenType))?;
        }
        if !self.token.is_empty() {
            os.write_string(2, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateBarcodeResponse {
        AuthenticateBarcodeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TokenType>>(
                "tokenType",
                |m: &AuthenticateBarcodeResponse| { &m.tokenType },
                |m: &mut AuthenticateBarcodeResponse| { &mut m.tokenType },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &AuthenticateBarcodeResponse| { &m.token },
                |m: &mut AuthenticateBarcodeResponse| { &mut m.token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateBarcodeResponse>(
                "AuthenticateBarcodeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateBarcodeResponse {
        static instance: ::protobuf::rt::LazyV2<AuthenticateBarcodeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateBarcodeResponse::new)
    }
}

impl ::protobuf::Clear for AuthenticateBarcodeResponse {
    fn clear(&mut self) {
        self.tokenType = TokenType::ACCOUNT_ACCESS_TOKEN;
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateBarcodeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateBarcodeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcTypeRequest {
    // message fields
    pub card_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcTypeRequest {
    fn default() -> &'a AuthenticateNfcTypeRequest {
        <AuthenticateNfcTypeRequest as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcTypeRequest {
    pub fn new() -> AuthenticateNfcTypeRequest {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcTypeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcTypeRequest {
        AuthenticateNfcTypeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcTypeRequest| { &m.card_id },
                |m: &mut AuthenticateNfcTypeRequest| { &mut m.card_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcTypeRequest>(
                "AuthenticateNfcTypeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcTypeRequest {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcTypeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcTypeRequest::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcTypeRequest {
    fn clear(&mut self) {
        self.card_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcTypeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcTypeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcTypeResponse {
    // message fields
    pub card_id: ::std::string::String,
    pub tokenType: NfcCardType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcTypeResponse {
    fn default() -> &'a AuthenticateNfcTypeResponse {
        <AuthenticateNfcTypeResponse as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcTypeResponse {
    pub fn new() -> AuthenticateNfcTypeResponse {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }

    // .authentication.NfcCardType tokenType = 2;


    pub fn get_tokenType(&self) -> NfcCardType {
        self.tokenType
    }
    pub fn clear_tokenType(&mut self) {
        self.tokenType = NfcCardType::GENERIC;
    }

    // Param is passed by value, moved
    pub fn set_tokenType(&mut self, v: NfcCardType) {
        self.tokenType = v;
    }
}

impl ::protobuf::Message for AuthenticateNfcTypeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tokenType, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        if self.tokenType != NfcCardType::GENERIC {
            my_size += ::protobuf::rt::enum_size(2, self.tokenType);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        if self.tokenType != NfcCardType::GENERIC {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.tokenType))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcTypeResponse {
        AuthenticateNfcTypeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcTypeResponse| { &m.card_id },
                |m: &mut AuthenticateNfcTypeResponse| { &mut m.card_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NfcCardType>>(
                "tokenType",
                |m: &AuthenticateNfcTypeResponse| { &m.tokenType },
                |m: &mut AuthenticateNfcTypeResponse| { &mut m.tokenType },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcTypeResponse>(
                "AuthenticateNfcTypeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcTypeResponse {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcTypeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcTypeResponse::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcTypeResponse {
    fn clear(&mut self) {
        self.card_id.clear();
        self.tokenType = NfcCardType::GENERIC;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcTypeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcTypeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcGenericRequest {
    // message fields
    pub card_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcGenericRequest {
    fn default() -> &'a AuthenticateNfcGenericRequest {
        <AuthenticateNfcGenericRequest as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcGenericRequest {
    pub fn new() -> AuthenticateNfcGenericRequest {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcGenericRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcGenericRequest {
        AuthenticateNfcGenericRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcGenericRequest| { &m.card_id },
                |m: &mut AuthenticateNfcGenericRequest| { &mut m.card_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcGenericRequest>(
                "AuthenticateNfcGenericRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcGenericRequest {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcGenericRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcGenericRequest::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcGenericRequest {
    fn clear(&mut self) {
        self.card_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcGenericRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcGenericRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcGenericResponse {
    // message fields
    pub card_id: ::std::string::String,
    pub tokenType: TokenType,
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcGenericResponse {
    fn default() -> &'a AuthenticateNfcGenericResponse {
        <AuthenticateNfcGenericResponse as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcGenericResponse {
    pub fn new() -> AuthenticateNfcGenericResponse {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }

    // .authentication.TokenType tokenType = 2;


    pub fn get_tokenType(&self) -> TokenType {
        self.tokenType
    }
    pub fn clear_tokenType(&mut self) {
        self.tokenType = TokenType::ACCOUNT_ACCESS_TOKEN;
    }

    // Param is passed by value, moved
    pub fn set_tokenType(&mut self, v: TokenType) {
        self.tokenType = v;
    }

    // string token = 3;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcGenericResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tokenType, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        if self.tokenType != TokenType::ACCOUNT_ACCESS_TOKEN {
            my_size += ::protobuf::rt::enum_size(2, self.tokenType);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        if self.tokenType != TokenType::ACCOUNT_ACCESS_TOKEN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.tokenType))?;
        }
        if !self.token.is_empty() {
            os.write_string(3, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcGenericResponse {
        AuthenticateNfcGenericResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcGenericResponse| { &m.card_id },
                |m: &mut AuthenticateNfcGenericResponse| { &mut m.card_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TokenType>>(
                "tokenType",
                |m: &AuthenticateNfcGenericResponse| { &m.tokenType },
                |m: &mut AuthenticateNfcGenericResponse| { &mut m.tokenType },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &AuthenticateNfcGenericResponse| { &m.token },
                |m: &mut AuthenticateNfcGenericResponse| { &mut m.token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcGenericResponse>(
                "AuthenticateNfcGenericResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcGenericResponse {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcGenericResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcGenericResponse::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcGenericResponse {
    fn clear(&mut self) {
        self.card_id.clear();
        self.tokenType = TokenType::ACCOUNT_ACCESS_TOKEN;
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcGenericResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcGenericResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcMifareDesfirePhase1Request {
    // message fields
    pub card_id: ::std::string::String,
    pub ek_rndB: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcMifareDesfirePhase1Request {
    fn default() -> &'a AuthenticateNfcMifareDesfirePhase1Request {
        <AuthenticateNfcMifareDesfirePhase1Request as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcMifareDesfirePhase1Request {
    pub fn new() -> AuthenticateNfcMifareDesfirePhase1Request {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }

    // string ek_rndB = 2;


    pub fn get_ek_rndB(&self) -> &str {
        &self.ek_rndB
    }
    pub fn clear_ek_rndB(&mut self) {
        self.ek_rndB.clear();
    }

    // Param is passed by value, moved
    pub fn set_ek_rndB(&mut self, v: ::std::string::String) {
        self.ek_rndB = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ek_rndB(&mut self) -> &mut ::std::string::String {
        &mut self.ek_rndB
    }

    // Take field
    pub fn take_ek_rndB(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ek_rndB, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcMifareDesfirePhase1Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ek_rndB)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        if !self.ek_rndB.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ek_rndB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        if !self.ek_rndB.is_empty() {
            os.write_string(2, &self.ek_rndB)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcMifareDesfirePhase1Request {
        AuthenticateNfcMifareDesfirePhase1Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcMifareDesfirePhase1Request| { &m.card_id },
                |m: &mut AuthenticateNfcMifareDesfirePhase1Request| { &mut m.card_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ek_rndB",
                |m: &AuthenticateNfcMifareDesfirePhase1Request| { &m.ek_rndB },
                |m: &mut AuthenticateNfcMifareDesfirePhase1Request| { &mut m.ek_rndB },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcMifareDesfirePhase1Request>(
                "AuthenticateNfcMifareDesfirePhase1Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcMifareDesfirePhase1Request {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcMifareDesfirePhase1Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcMifareDesfirePhase1Request::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcMifareDesfirePhase1Request {
    fn clear(&mut self) {
        self.card_id.clear();
        self.ek_rndB.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcMifareDesfirePhase1Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcMifareDesfirePhase1Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcMifareDesfirePhase1Response {
    // message fields
    pub card_id: ::std::string::String,
    pub dk_rndA_rndBshifted: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcMifareDesfirePhase1Response {
    fn default() -> &'a AuthenticateNfcMifareDesfirePhase1Response {
        <AuthenticateNfcMifareDesfirePhase1Response as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcMifareDesfirePhase1Response {
    pub fn new() -> AuthenticateNfcMifareDesfirePhase1Response {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }

    // string dk_rndA_rndBshifted = 2;


    pub fn get_dk_rndA_rndBshifted(&self) -> &str {
        &self.dk_rndA_rndBshifted
    }
    pub fn clear_dk_rndA_rndBshifted(&mut self) {
        self.dk_rndA_rndBshifted.clear();
    }

    // Param is passed by value, moved
    pub fn set_dk_rndA_rndBshifted(&mut self, v: ::std::string::String) {
        self.dk_rndA_rndBshifted = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dk_rndA_rndBshifted(&mut self) -> &mut ::std::string::String {
        &mut self.dk_rndA_rndBshifted
    }

    // Take field
    pub fn take_dk_rndA_rndBshifted(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dk_rndA_rndBshifted, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcMifareDesfirePhase1Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dk_rndA_rndBshifted)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        if !self.dk_rndA_rndBshifted.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.dk_rndA_rndBshifted);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        if !self.dk_rndA_rndBshifted.is_empty() {
            os.write_string(2, &self.dk_rndA_rndBshifted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcMifareDesfirePhase1Response {
        AuthenticateNfcMifareDesfirePhase1Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcMifareDesfirePhase1Response| { &m.card_id },
                |m: &mut AuthenticateNfcMifareDesfirePhase1Response| { &mut m.card_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dk_rndA_rndBshifted",
                |m: &AuthenticateNfcMifareDesfirePhase1Response| { &m.dk_rndA_rndBshifted },
                |m: &mut AuthenticateNfcMifareDesfirePhase1Response| { &mut m.dk_rndA_rndBshifted },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcMifareDesfirePhase1Response>(
                "AuthenticateNfcMifareDesfirePhase1Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcMifareDesfirePhase1Response {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcMifareDesfirePhase1Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcMifareDesfirePhase1Response::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcMifareDesfirePhase1Response {
    fn clear(&mut self) {
        self.card_id.clear();
        self.dk_rndA_rndBshifted.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcMifareDesfirePhase1Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcMifareDesfirePhase1Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcMifareDesfirePhase2Request {
    // message fields
    pub card_id: ::std::string::String,
    pub dk_rndA_rndBshifted: ::std::string::String,
    pub ek_rndAshifted_card: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcMifareDesfirePhase2Request {
    fn default() -> &'a AuthenticateNfcMifareDesfirePhase2Request {
        <AuthenticateNfcMifareDesfirePhase2Request as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcMifareDesfirePhase2Request {
    pub fn new() -> AuthenticateNfcMifareDesfirePhase2Request {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }

    // string dk_rndA_rndBshifted = 2;


    pub fn get_dk_rndA_rndBshifted(&self) -> &str {
        &self.dk_rndA_rndBshifted
    }
    pub fn clear_dk_rndA_rndBshifted(&mut self) {
        self.dk_rndA_rndBshifted.clear();
    }

    // Param is passed by value, moved
    pub fn set_dk_rndA_rndBshifted(&mut self, v: ::std::string::String) {
        self.dk_rndA_rndBshifted = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dk_rndA_rndBshifted(&mut self) -> &mut ::std::string::String {
        &mut self.dk_rndA_rndBshifted
    }

    // Take field
    pub fn take_dk_rndA_rndBshifted(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dk_rndA_rndBshifted, ::std::string::String::new())
    }

    // string ek_rndAshifted_card = 3;


    pub fn get_ek_rndAshifted_card(&self) -> &str {
        &self.ek_rndAshifted_card
    }
    pub fn clear_ek_rndAshifted_card(&mut self) {
        self.ek_rndAshifted_card.clear();
    }

    // Param is passed by value, moved
    pub fn set_ek_rndAshifted_card(&mut self, v: ::std::string::String) {
        self.ek_rndAshifted_card = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ek_rndAshifted_card(&mut self) -> &mut ::std::string::String {
        &mut self.ek_rndAshifted_card
    }

    // Take field
    pub fn take_ek_rndAshifted_card(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ek_rndAshifted_card, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcMifareDesfirePhase2Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dk_rndA_rndBshifted)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ek_rndAshifted_card)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        if !self.dk_rndA_rndBshifted.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.dk_rndA_rndBshifted);
        }
        if !self.ek_rndAshifted_card.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ek_rndAshifted_card);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        if !self.dk_rndA_rndBshifted.is_empty() {
            os.write_string(2, &self.dk_rndA_rndBshifted)?;
        }
        if !self.ek_rndAshifted_card.is_empty() {
            os.write_string(3, &self.ek_rndAshifted_card)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcMifareDesfirePhase2Request {
        AuthenticateNfcMifareDesfirePhase2Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcMifareDesfirePhase2Request| { &m.card_id },
                |m: &mut AuthenticateNfcMifareDesfirePhase2Request| { &mut m.card_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dk_rndA_rndBshifted",
                |m: &AuthenticateNfcMifareDesfirePhase2Request| { &m.dk_rndA_rndBshifted },
                |m: &mut AuthenticateNfcMifareDesfirePhase2Request| { &mut m.dk_rndA_rndBshifted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ek_rndAshifted_card",
                |m: &AuthenticateNfcMifareDesfirePhase2Request| { &m.ek_rndAshifted_card },
                |m: &mut AuthenticateNfcMifareDesfirePhase2Request| { &mut m.ek_rndAshifted_card },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcMifareDesfirePhase2Request>(
                "AuthenticateNfcMifareDesfirePhase2Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcMifareDesfirePhase2Request {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcMifareDesfirePhase2Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcMifareDesfirePhase2Request::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcMifareDesfirePhase2Request {
    fn clear(&mut self) {
        self.card_id.clear();
        self.dk_rndA_rndBshifted.clear();
        self.ek_rndAshifted_card.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcMifareDesfirePhase2Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcMifareDesfirePhase2Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcMifareDesfirePhase2Response {
    // message fields
    pub card_id: ::std::string::String,
    pub session_key: ::std::string::String,
    pub tokenType: TokenType,
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcMifareDesfirePhase2Response {
    fn default() -> &'a AuthenticateNfcMifareDesfirePhase2Response {
        <AuthenticateNfcMifareDesfirePhase2Response as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcMifareDesfirePhase2Response {
    pub fn new() -> AuthenticateNfcMifareDesfirePhase2Response {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }

    // string session_key = 2;


    pub fn get_session_key(&self) -> &str {
        &self.session_key
    }
    pub fn clear_session_key(&mut self) {
        self.session_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_key(&mut self, v: ::std::string::String) {
        self.session_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_key(&mut self) -> &mut ::std::string::String {
        &mut self.session_key
    }

    // Take field
    pub fn take_session_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_key, ::std::string::String::new())
    }

    // .authentication.TokenType tokenType = 3;


    pub fn get_tokenType(&self) -> TokenType {
        self.tokenType
    }
    pub fn clear_tokenType(&mut self) {
        self.tokenType = TokenType::ACCOUNT_ACCESS_TOKEN;
    }

    // Param is passed by value, moved
    pub fn set_tokenType(&mut self, v: TokenType) {
        self.tokenType = v;
    }

    // string token = 4;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcMifareDesfirePhase2Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_key)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tokenType, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        if !self.session_key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.session_key);
        }
        if self.tokenType != TokenType::ACCOUNT_ACCESS_TOKEN {
            my_size += ::protobuf::rt::enum_size(3, self.tokenType);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        if !self.session_key.is_empty() {
            os.write_string(2, &self.session_key)?;
        }
        if self.tokenType != TokenType::ACCOUNT_ACCESS_TOKEN {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.tokenType))?;
        }
        if !self.token.is_empty() {
            os.write_string(4, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcMifareDesfirePhase2Response {
        AuthenticateNfcMifareDesfirePhase2Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcMifareDesfirePhase2Response| { &m.card_id },
                |m: &mut AuthenticateNfcMifareDesfirePhase2Response| { &mut m.card_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_key",
                |m: &AuthenticateNfcMifareDesfirePhase2Response| { &m.session_key },
                |m: &mut AuthenticateNfcMifareDesfirePhase2Response| { &mut m.session_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TokenType>>(
                "tokenType",
                |m: &AuthenticateNfcMifareDesfirePhase2Response| { &m.tokenType },
                |m: &mut AuthenticateNfcMifareDesfirePhase2Response| { &mut m.tokenType },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &AuthenticateNfcMifareDesfirePhase2Response| { &m.token },
                |m: &mut AuthenticateNfcMifareDesfirePhase2Response| { &mut m.token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcMifareDesfirePhase2Response>(
                "AuthenticateNfcMifareDesfirePhase2Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcMifareDesfirePhase2Response {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcMifareDesfirePhase2Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcMifareDesfirePhase2Response::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcMifareDesfirePhase2Response {
    fn clear(&mut self) {
        self.card_id.clear();
        self.session_key.clear();
        self.tokenType = TokenType::ACCOUNT_ACCESS_TOKEN;
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcMifareDesfirePhase2Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcMifareDesfirePhase2Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcGenericInitCardRequest {
    // message fields
    pub card_id: ::std::string::String,
    pub account_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcGenericInitCardRequest {
    fn default() -> &'a AuthenticateNfcGenericInitCardRequest {
        <AuthenticateNfcGenericInitCardRequest as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcGenericInitCardRequest {
    pub fn new() -> AuthenticateNfcGenericInitCardRequest {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }

    // string account_id = 2;


    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }
    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcGenericInitCardRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.account_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        if !self.account_id.is_empty() {
            os.write_string(2, &self.account_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcGenericInitCardRequest {
        AuthenticateNfcGenericInitCardRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcGenericInitCardRequest| { &m.card_id },
                |m: &mut AuthenticateNfcGenericInitCardRequest| { &mut m.card_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_id",
                |m: &AuthenticateNfcGenericInitCardRequest| { &m.account_id },
                |m: &mut AuthenticateNfcGenericInitCardRequest| { &mut m.account_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcGenericInitCardRequest>(
                "AuthenticateNfcGenericInitCardRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcGenericInitCardRequest {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcGenericInitCardRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcGenericInitCardRequest::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcGenericInitCardRequest {
    fn clear(&mut self) {
        self.card_id.clear();
        self.account_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcGenericInitCardRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcGenericInitCardRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcGenericInitCardResponse {
    // message fields
    pub card_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcGenericInitCardResponse {
    fn default() -> &'a AuthenticateNfcGenericInitCardResponse {
        <AuthenticateNfcGenericInitCardResponse as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcGenericInitCardResponse {
    pub fn new() -> AuthenticateNfcGenericInitCardResponse {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcGenericInitCardResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcGenericInitCardResponse {
        AuthenticateNfcGenericInitCardResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcGenericInitCardResponse| { &m.card_id },
                |m: &mut AuthenticateNfcGenericInitCardResponse| { &mut m.card_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcGenericInitCardResponse>(
                "AuthenticateNfcGenericInitCardResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcGenericInitCardResponse {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcGenericInitCardResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcGenericInitCardResponse::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcGenericInitCardResponse {
    fn clear(&mut self) {
        self.card_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcGenericInitCardResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcGenericInitCardResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcMifareDesfireInitCardRequest {
    // message fields
    pub card_id: ::std::string::String,
    pub account_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcMifareDesfireInitCardRequest {
    fn default() -> &'a AuthenticateNfcMifareDesfireInitCardRequest {
        <AuthenticateNfcMifareDesfireInitCardRequest as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcMifareDesfireInitCardRequest {
    pub fn new() -> AuthenticateNfcMifareDesfireInitCardRequest {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }

    // string account_id = 2;


    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }
    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcMifareDesfireInitCardRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.account_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        if !self.account_id.is_empty() {
            os.write_string(2, &self.account_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcMifareDesfireInitCardRequest {
        AuthenticateNfcMifareDesfireInitCardRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcMifareDesfireInitCardRequest| { &m.card_id },
                |m: &mut AuthenticateNfcMifareDesfireInitCardRequest| { &mut m.card_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_id",
                |m: &AuthenticateNfcMifareDesfireInitCardRequest| { &m.account_id },
                |m: &mut AuthenticateNfcMifareDesfireInitCardRequest| { &mut m.account_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcMifareDesfireInitCardRequest>(
                "AuthenticateNfcMifareDesfireInitCardRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcMifareDesfireInitCardRequest {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcMifareDesfireInitCardRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcMifareDesfireInitCardRequest::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcMifareDesfireInitCardRequest {
    fn clear(&mut self) {
        self.card_id.clear();
        self.account_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcMifareDesfireInitCardRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcMifareDesfireInitCardRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthenticateNfcMifareDesfireInitCardResponse {
    // message fields
    pub card_id: ::std::string::String,
    pub key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthenticateNfcMifareDesfireInitCardResponse {
    fn default() -> &'a AuthenticateNfcMifareDesfireInitCardResponse {
        <AuthenticateNfcMifareDesfireInitCardResponse as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticateNfcMifareDesfireInitCardResponse {
    pub fn new() -> AuthenticateNfcMifareDesfireInitCardResponse {
        ::std::default::Default::default()
    }

    // string card_id = 1;


    pub fn get_card_id(&self) -> &str {
        &self.card_id
    }
    pub fn clear_card_id(&mut self) {
        self.card_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_card_id(&mut self, v: ::std::string::String) {
        self.card_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_card_id(&mut self) -> &mut ::std::string::String {
        &mut self.card_id
    }

    // Take field
    pub fn take_card_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.card_id, ::std::string::String::new())
    }

    // string key = 2;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthenticateNfcMifareDesfireInitCardResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.card_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.card_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.card_id);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.card_id.is_empty() {
            os.write_string(1, &self.card_id)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthenticateNfcMifareDesfireInitCardResponse {
        AuthenticateNfcMifareDesfireInitCardResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "card_id",
                |m: &AuthenticateNfcMifareDesfireInitCardResponse| { &m.card_id },
                |m: &mut AuthenticateNfcMifareDesfireInitCardResponse| { &mut m.card_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &AuthenticateNfcMifareDesfireInitCardResponse| { &m.key },
                |m: &mut AuthenticateNfcMifareDesfireInitCardResponse| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthenticateNfcMifareDesfireInitCardResponse>(
                "AuthenticateNfcMifareDesfireInitCardResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthenticateNfcMifareDesfireInitCardResponse {
        static instance: ::protobuf::rt::LazyV2<AuthenticateNfcMifareDesfireInitCardResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthenticateNfcMifareDesfireInitCardResponse::new)
    }
}

impl ::protobuf::Clear for AuthenticateNfcMifareDesfireInitCardResponse {
    fn clear(&mut self) {
        self.card_id.clear();
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthenticateNfcMifareDesfireInitCardResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticateNfcMifareDesfireInitCardResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NfcCardType {
    GENERIC = 0,
    MIFARE_DESFIRE = 1,
}

impl ::protobuf::ProtobufEnum for NfcCardType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NfcCardType> {
        match value {
            0 => ::std::option::Option::Some(NfcCardType::GENERIC),
            1 => ::std::option::Option::Some(NfcCardType::MIFARE_DESFIRE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NfcCardType] = &[
            NfcCardType::GENERIC,
            NfcCardType::MIFARE_DESFIRE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<NfcCardType>("NfcCardType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for NfcCardType {
}

impl ::std::default::Default for NfcCardType {
    fn default() -> Self {
        NfcCardType::GENERIC
    }
}

impl ::protobuf::reflect::ProtobufValue for NfcCardType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TokenType {
    ACCOUNT_ACCESS_TOKEN = 0,
    PRODUCT_ID = 1,
}

impl ::protobuf::ProtobufEnum for TokenType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TokenType> {
        match value {
            0 => ::std::option::Option::Some(TokenType::ACCOUNT_ACCESS_TOKEN),
            1 => ::std::option::Option::Some(TokenType::PRODUCT_ID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TokenType] = &[
            TokenType::ACCOUNT_ACCESS_TOKEN,
            TokenType::PRODUCT_ID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TokenType>("TokenType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TokenType {
}

impl ::std::default::Default for TokenType {
    fn default() -> Self {
        TokenType::ACCOUNT_ACCESS_TOKEN
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aproto/authentication.proto\x12\x0eauthentication\"0\n\x1aAuthentic\
    ateBarcodeRequest\x12\x12\n\x04code\x18\x01\x20\x01(\tR\x04code\"l\n\x1b\
    AuthenticateBarcodeResponse\x127\n\ttokenType\x18\x01\x20\x01(\x0e2\x19.\
    authentication.TokenTypeR\ttokenType\x12\x14\n\x05token\x18\x02\x20\x01(\
    \tR\x05token\"5\n\x1aAuthenticateNfcTypeRequest\x12\x17\n\x07card_id\x18\
    \x01\x20\x01(\tR\x06cardId\"q\n\x1bAuthenticateNfcTypeResponse\x12\x17\n\
    \x07card_id\x18\x01\x20\x01(\tR\x06cardId\x129\n\ttokenType\x18\x02\x20\
    \x01(\x0e2\x1b.authentication.NfcCardTypeR\ttokenType\"8\n\x1dAuthentica\
    teNfcGenericRequest\x12\x17\n\x07card_id\x18\x01\x20\x01(\tR\x06cardId\"\
    \x88\x01\n\x1eAuthenticateNfcGenericResponse\x12\x17\n\x07card_id\x18\
    \x01\x20\x01(\tR\x06cardId\x127\n\ttokenType\x18\x02\x20\x01(\x0e2\x19.a\
    uthentication.TokenTypeR\ttokenType\x12\x14\n\x05token\x18\x03\x20\x01(\
    \tR\x05token\"]\n)AuthenticateNfcMifareDesfirePhase1Request\x12\x17\n\
    \x07card_id\x18\x01\x20\x01(\tR\x06cardId\x12\x17\n\x07ek_rndB\x18\x02\
    \x20\x01(\tR\x06ekRndB\"u\n*AuthenticateNfcMifareDesfirePhase1Response\
    \x12\x17\n\x07card_id\x18\x01\x20\x01(\tR\x06cardId\x12.\n\x13dk_rndA_rn\
    dBshifted\x18\x02\x20\x01(\tR\x11dkRndARndBshifted\"\xa4\x01\n)Authentic\
    ateNfcMifareDesfirePhase2Request\x12\x17\n\x07card_id\x18\x01\x20\x01(\t\
    R\x06cardId\x12.\n\x13dk_rndA_rndBshifted\x18\x02\x20\x01(\tR\x11dkRndAR\
    ndBshifted\x12.\n\x13ek_rndAshifted_card\x18\x03\x20\x01(\tR\x11ekRndAsh\
    iftedCard\"\xb5\x01\n*AuthenticateNfcMifareDesfirePhase2Response\x12\x17\
    \n\x07card_id\x18\x01\x20\x01(\tR\x06cardId\x12\x1f\n\x0bsession_key\x18\
    \x02\x20\x01(\tR\nsessionKey\x127\n\ttokenType\x18\x03\x20\x01(\x0e2\x19\
    .authentication.TokenTypeR\ttokenType\x12\x14\n\x05token\x18\x04\x20\x01\
    (\tR\x05token\"_\n%AuthenticateNfcGenericInitCardRequest\x12\x17\n\x07ca\
    rd_id\x18\x01\x20\x01(\tR\x06cardId\x12\x1d\n\naccount_id\x18\x02\x20\
    \x01(\tR\taccountId\"A\n&AuthenticateNfcGenericInitCardResponse\x12\x17\
    \n\x07card_id\x18\x01\x20\x01(\tR\x06cardId\"e\n+AuthenticateNfcMifareDe\
    sfireInitCardRequest\x12\x17\n\x07card_id\x18\x01\x20\x01(\tR\x06cardId\
    \x12\x1d\n\naccount_id\x18\x02\x20\x01(\tR\taccountId\"Y\n,AuthenticateN\
    fcMifareDesfireInitCardResponse\x12\x17\n\x07card_id\x18\x01\x20\x01(\tR\
    \x06cardId\x12\x10\n\x03key\x18\x02\x20\x01(\tR\x03key*.\n\x0bNfcCardTyp\
    e\x12\x0b\n\x07GENERIC\x10\0\x12\x12\n\x0eMIFARE_DESFIRE\x10\x01*5\n\tTo\
    kenType\x12\x18\n\x14ACCOUNT_ACCESS_TOKEN\x10\0\x12\x0e\n\nPRODUCT_ID\
    \x10\x012\xf1\x07\n\x16AsciiPayAuthentication\x12p\n\x13AuthenticateBarc\
    ode\x12*.authentication.AuthenticateBarcodeRequest\x1a+.authentication.A\
    uthenticateBarcodeResponse\"\0\x12p\n\x13AuthenticateNfcType\x12*.authen\
    tication.AuthenticateNfcTypeRequest\x1a+.authentication.AuthenticateNfcT\
    ypeResponse\"\0\x12y\n\x16AuthenticateNfcGeneric\x12-.authentication.Aut\
    henticateNfcGenericRequest\x1a..authentication.AuthenticateNfcGenericRes\
    ponse\"\0\x12\x9d\x01\n\"AuthenticateNfcMifareDesfirePhase1\x129.authent\
    ication.AuthenticateNfcMifareDesfirePhase1Request\x1a:.authentication.Au\
    thenticateNfcMifareDesfirePhase1Response\"\0\x12\x9d\x01\n\"Authenticate\
    NfcMifareDesfirePhase2\x129.authentication.AuthenticateNfcMifareDesfireP\
    hase2Request\x1a:.authentication.AuthenticateNfcMifareDesfirePhase2Respo\
    nse\"\0\x12\x91\x01\n\x1eAuthenticateNfcGenericInitCard\x125.authenticat\
    ion.AuthenticateNfcGenericInitCardRequest\x1a6.authentication.Authentica\
    teNfcGenericInitCardResponse\"\0\x12\xa3\x01\n$AuthenticateNfcMifareDesf\
    ireInitCard\x12;.authentication.AuthenticateNfcMifareDesfireInitCardRequ\
    est\x1a<.authentication.AuthenticateNfcMifareDesfireInitCardResponse\"\0\
    BA\n\x1fcoffee.ascii.pay.authenticationB\x16AsciiPayAuthenticationP\x01\
    \xa2\x02\x03APAb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
